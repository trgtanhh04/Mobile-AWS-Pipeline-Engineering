version: '3'

x-airflow-common:
  &airflow-common
  build:
    context: .
    dockerfile: Dockerfile
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres-airflow/airflow
    AIRFLOW__CORE__FERNET_KEY: '92FtMYkuhHkFCcswu_c0IfPWZ0CUY1nHp_D-jQWADLU='
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.session,airflow.api.auth.backend.basic_auth'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    AIRFLOW__WEBSERVER__BASE_URL: 'http://localhost:8081'
    CURRENT_DATE_UTC: "2025-04-25 08:55:00"
    CURRENT_USER: "TienAnh"
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - /var/run/docker.sock:/var/run/docker.sock
  group_add:
    - docker
  networks:
    - airflow-network

services:
  postgres-airflow:
    image: postgres:14
    container_name: postgres-airflow
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - "5433:5432"
    volumes:
      - postgres-airflow-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    networks:
      - airflow-network

  airflow-init:
    image: apache/airflow:2.7.2
    container_name: airflow-init
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./scripts:/opt/airflow/scripts
      - /home/tienanh/Mobile-Data-Pipeline-Engineering/scripts:/opt/airflow/scripts
    # command: >
    #   bash -c "
    #     airflow db upgrade &&
    #     airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com
    #   "
    command: bash -c "airflow db upgrade && airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com && airflow connections delete 'postgres_warehouse' || true && airflow connections add 'postgres_warehouse' --conn-type 'postgres' --conn-login 'postgres' --conn-password 'postgres' --conn-host 'postgres' --conn-port '5432' --conn-schema 'movie_warehouse'"

    depends_on:
      postgres-airflow:
        condition: service_healthy
    networks:
      - airflow-network

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    restart: always
    command: webserver
    ports:
      - "8081:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres-airflow:
        condition: service_healthy
      selenium-chrome:
        condition: service_started
    networks:
      - airflow-network

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    restart: always
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres-airflow:
        condition: service_healthy
    networks:
      - airflow-network

  proxy-service:
    image: browserless/chrome:latest
    ports:
      - "3000:3000"
    environment:
      - MAX_CONCURRENT_SESSIONS=10

  selenium-chrome:
    image: selenium/standalone-chrome:latest
    container_name: selenium-chrome
    shm_size: 2g
    ports:
      - "4444:4444"
      - "7900:7900"
    environment:
      - VNC_NO_PASSWORD=1
      - SCREEN_WIDTH=1920
      - SCREEN_HEIGHT=1080
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4444/wd/hub/status"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - airflow-network

  postgres:
    image: postgres:14
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
      - ./init-scripts/init-warehouse-db.sql:/docker-entrypoint-initdb.d/init-warehouse-db.sql
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      retries: 5
      start_period: 5s
    networks:
      - airflow-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - airflow-network

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:29092 
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092  
    networks:
      - airflow-network

  kafka-init:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka-init
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: "sleep 10 && kafka-topics --create --topic test-topic --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1"
    networks:
      - airflow-network

volumes:
  postgres-airflow-volume:
  postgres-db-volume:

networks:
  airflow-network:
    driver: bridge